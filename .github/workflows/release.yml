name: Build and Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install OpenSSL
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y libssl-dev
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install openssl
          else
            choco install openssl -y
          fi
        shell: bash

      - name: Configure CMake
        run: |
          if ($env:RUNNER_OS -eq "Windows") {
            $OPENSSL_ROOT = "C:/Program Files/OpenSSL-Win64"
            Write-Host "Using OpenSSL from: $OPENSSL_ROOT"

            if (!(Test-Path "$OPENSSL_ROOT/lib/libcrypto.lib")) {
              Write-Host "‚ö† OpenSSL .lib not found in $OPENSSL_ROOT/lib, checking alternative path..."
              $OPENSSL_ROOT = "C:/Program Files/OpenSSL-Win64/lib/VC"
            }

            cmake -B build -S . `
              -G "Visual Studio 17 2022" `
              -A x64 `
              -DCMAKE_BUILD_TYPE=Release `
              -DOPENSSL_USE_STATIC_LIBS=TRUE `
              -DOPENSSL_ROOT_DIR="$OPENSSL_ROOT" `
              -DOPENSSL_INCLUDE_DIR="$OPENSSL_ROOT/include" `
              -DOPENSSL_CRYPTO_LIBRARY="$OPENSSL_ROOT/lib/libcrypto.lib" `
              -DOPENSSL_SSL_LIBRARY="$OPENSSL_ROOT/lib/libssl.lib"
          }
          elseif ($env:RUNNER_OS -eq "macOS") {
            cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DOPENSSL_ROOT_DIR=$(brew --prefix openssl)
          }
          else {
            cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
          }
        shell: pwsh

      - name: Build project
        run: cmake --build build --config Release
        shell: bash

      - name: Prepare artifacts
        run: |
          mkdir artifacts
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            if [ -f build/Release/file_crypt_cli.exe ]; then
              cp build/Release/file_crypt_cli.exe artifacts/file_crypt_cli-windows.exe
            elif [ -f build/Debug/file_crypt_cli.exe ]; then
              cp build/Debug/file_crypt_cli.exe artifacts/file_crypt_cli-windows.exe
            fi

            echo "üîç Checking dependencies..."
            "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/*/bin/Hostx64/x64/dumpbin.exe" /dependents artifacts/file_crypt_cli-windows.exe || true

          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            cp build/file_crypt_cli artifacts/file_crypt_cli-linux
          else
            cp build/file_crypt_cli artifacts/file_crypt_cli-macos
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: artifacts/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_binaries/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: |
            ‚úÖ Automatic build for ${{ github.ref_name }}

            Includes binaries for:
            -  Linux (x86_64)
            -  macOS (ARM64 Apple Silicon)
            -  Windows (x86_64, statically linked OpenSSL)
          files: release_binaries/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
